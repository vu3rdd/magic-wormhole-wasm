[package]
name = "magic-wormhole-wasm"
version = "0.1.0"
authors = ["andi <andipabst25@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
serde = { version = "1.0.137", features = ["derive"] }
serde_json = "1.0.61"
wasm-bindgen = { version = "0.2.80", features= ["serde-serialize"] }
wasm-bindgen-futures = "0.4.34"
wasm-logger = "0.2.0"
futures = "0.3.26"

getrandom = { version = "0.1", features = ["wasm-bindgen"] }
url = { version = "2.2.2", features = ["serde"] }
clear_on_drop = { version = "0.2.5", features = ["no_cc"] }
#magic-wormhole = { git = "https://github.com/andipabst/magic-wormhole.rs"  , rev = "654cf3a" }
magic-wormhole = { path = "../magic-wormhole.rs" }
web-sys = { version = "0.3.57", features = ["HtmlElement", "HtmlInputElement", "FileReader", "ProgressEvent", "FileList", "File", "Blob"] }
js-sys = "0.3.57"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
